$npm init -y

instalar webpack
$ npm i webpack webpack-cli --save-dev

/*******************************************/
compilar un archivo con webpack

ir a la terminal 
$ ./node_modules/.bin/webpack src/index.js
esto nos generara una carpeta dis con el archivo main

ahora para ver en la web intalamos un paquete para la web
$ npm i html-webpack-plugin --save-dev
luego de esto hay que crear un archivo llamado webpack.config.js
con eso añadimos la configuracion de nuestro webpack

creamos un script para levantar el webpack

ahora hay que instalar el servidor de webpack
$ npm i webpack-dev-server --save-dev
ahora añadimos un script para lanzarlo

/*******************************************/

instalando react
npm i react react-dom

/*********************************************/

instalando babel 
npm i @babel/core @babel/preset-env babel-loader @babel/preset-react save-dev

configurando webpack con babel
/*********************************************/

instalando standarres de js
$ npm i standard --save-dev

ahora para utilizarlo añadimos un script
ignorar archivos para el lint en el package.json
"standard":{
    "ignore":[
        "/api/**"
    ]
}
config 
eslintConfig

levantando el servio en internet con now
hay que crear una configuracion de now.jsony y ejecutar 
$ now
/*********************************************/

Estilos componenets
$ npm i styled-components

iconos en react
npm i react-icons

Progress bar
npm install --save react-top-loading-bar

/*********************************************/

HOOKS
disponble apartir de las verisones >= 16.8.0 
useState: añadir un estado local al componente useState(valorInitial)
useEffect: ejecuta una funcion cada vez que renderizamos el componente useEffect(function, [])
useContext: nos permite acceder al contextAPI y obtener los valores(props) de nuestra app

Hooks auxiliares
useReducer: nos ayuda actualizar nuestro componenets como lo hacemos con redux

useCallback: 
useMemo:        nos permite coger referencia del elementos del DOM
useRef:

useImperativeHandle:
useLayoutEffect:        nos permite acceder a valores sin tener que poner console logs 
useDEbugValue:


/*********************************************/

Polyfill

npm install intersection-observer



/*********************************************/

GraphQL y React Apollo
GraphQL no sustituye REST API

* GraphQL es un lenguaje y se puede conectar a cualquier tipo de api

GraphQL                 REST
lenguaje                Arquitectura
Un solo endPoint        Multiples endPoint
Fetching justo          Over y underfetching
Conexion a otras APIs   Conexion directa con base de datos

$ npm i apollo-boost react-apollo graphql 

Si voy a usar headers como para la autorizacion debo instalar esto
$ npm i apollo-link-context

se configura en el index principal de toda la app 

Tips: Los container se encargan de hacer los Fetching de nuestros datos

Render Props
no renderiza un componente sino una funcion -> props 

Lo maravilloso de esto es que al hacer una peticion por el graphql y le pedimos que nos
retorne las variables esta se actualizara en toda nuestra aplicacion porque reconocera esos ids 
como pasa con los liked en las PhotoCard/index y su mutation de 

fetchPolicy 
nos sirve para decirle que no revice la cache de el sino que siempre
busque en la red para mantenerlo siempre sincronizado 
/*********************************************/

Reach Router

npm i @reach/router

cuando utizo webpack  en el package
"dev": "webpack-dev-server --history-api-fallback",
uso esa bandera para que pueda dectectar las rutas 

ahora en el webpack hay que decirle que el public path
comenzara en / 
output: {
    filename: 'app.bundle.js'
    publicPath: '/'
},

con Link reemplazamos las etiquetas <a/>
un comportamiento que tiene Link que al redireccionar 
este se enfoca en el componente
/*********************************************/ 

contextAPI
Crear el context y agregar en el index.html

/*********************************************/ 

React Helmet

Las SPA no necesariamente tienen mal SEO como se hace pensar. 
React Helmet nos va a ayudar a manejar el SEO de nuestra aplicación para poder
cambiar los meta, headers

$ npm i react-helmet

/*********************************************/ 





















Links
https://zeit.co/dashboard

React
https://zeit.co/camacaro/petgram-react-jcamacaro/29zjboc7h
https://petgram-react-jcamacaro-29zjboc7h.now.sh/

node
https://zeit.co/camacaro/petgram-server-jcamacaro/ovdyazczh

https://petgram-server-jcamacaro.camacaro.now.sh/categories
